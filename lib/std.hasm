%native write
%native external

%const CHAR_LIT_MAX_SIZE = 8

%const print_memory = byte_array(30, 0)
%const FRAC_PRECISION = 10

;; addr_a
;; addr_b
swap8:
%scope
    swap 2
    dup 1
    dup 1

    read8u
    swap 1
    read8u

    dup 2
    swap 1
    write8

    dup 2
    swap 1
    write8

    drop
    drop

    ret
%end

reverse:
%scope
    swap 2
    swap 1
    dup 0
    push 2
    divi

    loop:
        dup 0
        push 0
        eqi
        jmp_if end

        dup 2
        dup 2
        push 1
        minusi
        dup 1
        plusi
        call swap8

        push 1
        minusi

        swap 1
           push 2
           minusi
        swap 1

        swap 2
           push 1
           plusi
        swap 2

        jmp loop
    end:

    drop
    drop
    drop

    ret
%end

fabs:
%scope
    swap 1
    dup 0
    push 0.0
    gef
    jmp_if skip_negation
       push -0.0
       xor
    skip_negation:
    swap 1
    ret
%end

frac:
%scope
    swap 1
       dup 0
       f2i
       i2f
       minusf
    swap 1
    ret
%end

floor:
%scope
    swap 1
        dup 0
        f2i
        i2f
        dup 0
        swap 2
        minusf
        push 0.0
        lef
        jmp_if skip_dec
            push 1.0
            minusf
        skip_dec:
    swap 1
    ret
%end

print_positive:
%scope
    swap 1

    push print_memory

    loop:
        dup 1
        push 10
        modu
        push '0'
        plusi

        dup 1
        swap 1
        write8

        push 1
        plusi

        swap 1
        push 10
        divu
        swap 1

        dup 1
        push 0
        equ
        not
    jmp_if loop

    push print_memory
    minusi
    push print_memory
    swap 1

    dup 1
    dup 1
    call reverse

    native write

    drop

    ret
%end

;; TODO(#142): dump_f64 does not support NaN and Inf
dump_f64:
%scope
    swap 1

    dup 0
    push -0.0
    andb
    not
    jmp_if skip_negative
        push -0.0
        xor

        push print_memory
        push '-'
        write8

        push print_memory
        push 1
        native write
    skip_negative:

    push FRAC_PRECISION
    call b
    push 2.0
    divf

    push 1.0
    dup 2
    call frac
    minusf

    gef
    jmp_if no_frac

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    dup 0
    f2i
    call print_positive

    push print_memory
    push '.'
    write8

    push print_memory
    push 1
    native write

    call frac
    call print_frac

    jmp no_frac_end

no_frac:

    f2i
    push 1
    plusi
    call print_positive

    push print_memory
    push '.'
    write8

    push print_memory
    push 1
    native write

    push print_memory
    push '0'
    write8

    push print_memory
    push 1
    native write

no_frac_end:

    push print_memory
    push 10
    write8

    push print_memory
    push 1
    native write

    ret

    ;; 1.0^{-n}
    b:
    %scope
        swap 1
        push 1.0

        loop_begin:
           dup 1
           push 0
           lei
           jmp_if loop_end

           push 0.1
           multf

           swap 1
           push 1
           minusi
           swap 1

           jmp loop_begin
        loop_end:

        swap 1
        drop

        swap 1

        ret
    %end

    print_frac:
    %scope
        swap 1
        push FRAC_PRECISION
        call b
        push 2.0
        divf
        loop_begin:
            ;; U
            dup 1
            push 10.0
            multf
            call floor

            swap 2
              push 10.0
              multf
              call frac
            swap 2

            swap 1
                 push 10.0
                 multf
            swap 1

            ;; if (R < M) break;
            dup 2
            dup 2
            ltf
            jmp_if loop_end

            ;; if (R > 1 - M) break;
            dup 2
            dup 2
            push 1.0
            swap 1
            minusf
            gtf
            jmp_if loop_end

            f2i
            push '0'
            plusi
            push print_memory
            swap 1
            write8

            push print_memory
            push 1
            native write

        jmp loop_begin
        loop_end:

        dup 2
        push 0.5
        lef
        jmp_if skip_inc
           push 1.0
           plusf
        skip_inc:

        f2i
        push '0'
        plusi
        push print_memory
        swap 1
        write8

        push print_memory
        push 1
        native write

        drop
        drop
        ret

    %end
%end

dump_i64:
%scope
    swap 1
    dup 0
    push 0
    gei
    jmp_if skip_negation
       push print_memory
       push '-'
       write8

       push print_memory
       push 1
       native write

       push -1
       multi
    skip_negation:

    call print_positive

    push print_memory
    push 10
    write8

    push print_memory
    push 1
    native write

    ret
%end

dump_u64:
%scope
    swap 1
    call print_positive

    push print_memory
    push 10
    write8

    push print_memory
    push 1
    native write

    ret
%end

modulo:
%scope
    swap 2
    dup 1
    modi
    dup 1
    plusi
    dup 1
    modi
    swap 1
    drop
    swap 1
    ret
%end
